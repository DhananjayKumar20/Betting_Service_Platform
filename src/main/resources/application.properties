spring.application.name=Betting_Service_Platforms
#server.port=8082
wallet.api.baseurl=https://walletService.com/wallet
gameservice.api.baseurl=https://gameService.com/game
notificationservice.api.baseurl=https://notificationService.com/notify
adminservice.api.baseurl=https://adminservice.com/admin

# Database
spring.datasource.url=jdbc:mysql://localhost:3306/betting_service_db
spring.datasource.username=root
spring.datasource.password=78654846
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL8Dialect
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true
# Kafka broker address
spring.kafka.bootstrap-servers=localhost:9092

# Consumer settings
spring.kafka.consumer.group-id=bet-service-group
spring.kafka.consumer.auto-offset-reset=earliest
spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.value-deserializer=org.apache.kafka.common.serialization.StringDeserializer

# Producer settings
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer=org.apache.kafka.common.serialization.StringSerializer











--------------------------update package ----------------------------------------

public class PackageUpdateResponse {

    private Long packageId;
    private String packageName;
    private Double packagePrice;
    private String packageStatus;
    private String packageCurrency;
}

Service Code:-

public PackageUpdateResponse updatePackage(Long adminId, Long packageId, PackageRequest packageRequest) {
    //  Call third-party/internal service to update the package
    PackageResponse response = thirdPartyForUserGameHistory.updatePackage(packageId, packageRequest);

    // Prepare Admin Logs
    AdminActionLogs logs = new AdminActionLogs();
    logs.setAdminId(adminId);
    logs.setTime(LocalDateTime.now());
    logs.setActionType("Package Update");

    // Create Context Info as JSON
    Map<String, Object> contextMap = new HashMap<>();
    contextMap.put("PackageId", packageId);
    contextMap.put("UpdatedPackageName", packageRequest.getPackageName());
    contextMap.put("UpdatedStatus", packageRequest.getPackageStatus());
    contextMap.put("UpdatedAmount", packageRequest.getAmount());
    contextMap.put("UpdatedCurrency", packageRequest.getCurrency());

    try {
        ObjectMapper mapper = new ObjectMapper();
        String json = mapper.writeValueAsString(contextMap);
        logs.setContext(json);
    } catch (JsonProcessingException e) {
        throw new RuntimeException("Failed to serialize context", e);
    }

    // Save Logs to DB
    adminAuditRepository.save(logs);

    return response;
}
           
  --------------------------------Controller:----------------------------------

controller:-

@PutMapping("/{adminId}/update/package/{packageId}")
public ResponseEntity<PackageUpdateResponse> updatePackage(
        @PathVariable long adminId,
        @PathVariable long packageId,
        @RequestBody PackageRequest request) {

    PackageUpdateResponse response = adminAuditService.updatePackage(adminId, packageId, request);
    return ResponseEntity.ok(response);
}


-----------------------------For Delete Packing------------------------------------------

public class PackageDeleteResponse {

    private String message;
}

Service layer code:-

public PackageDeleteResponse deletePackage(Long adminId, Long packageId) {
    // Call third-party/internal service to delete the package
    String responseMessage = thirdPartyForUserGameHistory.deletePackage(packageId);

    // Prepare Admin Logs
    AdminActionLogs logs = new AdminActionLogs();
    logs.setAdminId(adminId);
    logs.setTime(LocalDateTime.now());
    logs.setActionType("Package Delete");

    // Prepare Context JSON
    Map<String, Object> contextMap = new HashMap<>();
    contextMap.put("DeletedPackageId", packageId);
    contextMap.put("package delete successfully", responseMessage);

    try {
        ObjectMapper mapper = new ObjectMapper();
        String json = mapper.writeValueAsString(contextMap);
        logs.setContext(json);
    } catch (JsonProcessingException e) {
        throw new RuntimeException("Failed to serialize context", e);
    }

    //  Save Logs
    adminAuditRepository.save(logs);

    //  Return custom response object
    PackageDeleteResponse response = new PackageDeleteResponse();
    response.setMessage(responseMessage);

    return responseMessage;
}
        
      --------------------------------Controller:----------------------------------

Controller:-

@DeleteMapping("/{adminId}/delete/package/{packageId}")
public ResponseEntity<PackageDeleteResponse> deletePackage(
        @PathVariable long adminId,
        @PathVariable long packageId) {

    PackageDeleteResponse response = adminAuditService.deletePackage(adminId, packageId);
    return ResponseEntity.ok(response);
}


In package & audits dashboard:-
1. es api [  const response = await fetch(`${BASE_URL}/admin/${adminId}/update/package`,] me /package ke bad /${packageId} add hone chaiye.

2. es api [const response = await fetch(`${BASE_URL}/admin/${adminId}/delete/package`,] me /package ke bad /${packageId} add hone chaiye.
